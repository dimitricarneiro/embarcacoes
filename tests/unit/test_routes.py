import pytest
from app import create_app
from tests.unit.test_pedidos import login  # 游댳 Importa a fun칞칚o login

@pytest.fixture
def client():
    app = create_app()
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_home_route(client):
    response = client.get('/')
    assert response.status_code == 302
    assert "Location" in response.headers  # 游댳 Confirma que h치 um cabe칞alho de redirecionamento
    assert response.headers["Location"].startswith("/auth/login")

def test_acesso_sem_login_formulario_pedido(client):
    """Teste para verificar que usu치rios n칚o autenticados s칚o redirecionados (302) ao tentar acessar /formulario-pedido"""

    response = client.get("/formulario-pedido", follow_redirects=False)
    
    assert response.status_code == 302  # 游댳 Confirma que h치 um redirecionamento
    assert "Location" in response.headers  # 游댳 Confirma que h치 um cabe칞alho de redirecionamento
    assert response.headers["Location"].startswith("/auth/login")
  
def test_acesso_com_login_formulario_pedido(client):
    """Teste para verificar se o formul치rio de pedido 칠 carregado corretamente"""

    # 游댳 Primeiro, faz login
    login(client)

    response = client.get("/formulario-pedido")  # Faz uma requisi칞칚o GET para a rota
    
    assert response.status_code == 200  # Verifica se a p치gina carregou corretamente
    html_content = response.data.decode("utf-8")  # Converte bytes para string
    
    assert "<title>Cadastrar Pedido de Autoriza칞칚o</title>" in html_content  # Verifica se o t칤tulo est치 presente no HTML
    assert "<form" in html_content  # Verifica se h치 um formul치rio na resposta HTML
    assert "Enviar Pedido de Autoriza칞칚o" in html_content  # Verifica se o bot칚o est치 presente

