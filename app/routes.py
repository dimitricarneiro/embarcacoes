# üîπ Importa√ß√µes do Flask
from flask import Blueprint, request, jsonify, render_template, Response, send_file, redirect, url_for, make_response, flash
from app import limiter

# üîπ Flask-Login (Autentica√ß√£o)
from flask_login import login_required, current_user

# üîπ Banco de Dados e Modelos
from app import db
from app.models import PedidoAutorizacao, Usuario, Notificacao, Embarcacao, Veiculo, Pessoa, Equipamento, Exigencia, Alerta

# üîπ Formul√°rios
from app.forms import AlertaForm

# üîπ Utilit√°rios
import io
from datetime import datetime
import csv
import re
import logging

# üîπ SQLAlchemy
from sqlalchemy.sql import func

# üîπ Bibliotecas para Gerar Relat√≥rios PDF
from io import BytesIO
from reportlab.lib.pagesizes import letter, landscape
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfgen import canvas
from app.utils import validar_cnpj

# üîπ Bibliotecas para Gerar Planilhas Excel
from openpyxl import Workbook
from openpyxl.styles import Font

# üîπ Bibliotecas para Gerar QRcode
import uuid
import qrcode
import base64


################Fun√ß√µes auxiliares
def filtrar_pedidos():
    """
    Aplica os filtros enviados via query string e retorna a lista de pedidos filtrados.
    """
    query = PedidoAutorizacao.query

    # Filtro: Nome da Empresa (busca parcial, sem case sensitive)
    nome_empresa = request.args.get('nome_empresa')
    if nome_empresa:
        query = query.filter(PedidoAutorizacao.empresa_responsavel.ilike(f"%{nome_empresa}%"))

    # Filtro: CNPJ (busca exata)
    cnpj_empresa = request.args.get('cnpj_empresa')
    if cnpj_empresa:
        query = query.filter(PedidoAutorizacao.cnpj_empresa == cnpj_empresa)

    # Filtro: Status
    status = request.args.get('status')
    if status:
        query = query.filter(PedidoAutorizacao.status == status)

    # Filtro: Data In√≠cio
    data_inicio = request.args.get('data_inicio')
    if data_inicio:
        try:
            data_inicio_date = datetime.strptime(data_inicio, '%Y-%m-%d').date()
            query = query.filter(PedidoAutorizacao.data_inicio >= data_inicio_date)
        except ValueError:
            pass  # Se o formato da data for inv√°lido, ignora o filtro

    # Filtro: Data T√©rmino
    data_termino = request.args.get('data_termino')
    if data_termino:
        try:
            data_termino_date = datetime.strptime(data_termino, '%Y-%m-%d').date()
            query = query.filter(PedidoAutorizacao.data_termino <= data_termino_date)
        except ValueError:
            pass

    return query.all()

def verificar_alertas(novo_pedido):
    """
    Verifica se o novo pedido atende a algum alerta cadastrado e, se sim, cria notifica√ß√µes para os respectivos usu√°rios RFB.
    """
    alertas = Alerta.query.filter_by(ativo=True).all()
    for alerta in alertas:
        # Se o alerta for do tipo "embarcacao", verificamos cada embarca√ß√£o do pedido
        if alerta.tipo == "embarcacao":
            for embarcacao in novo_pedido.embarcacoes:
                if alerta.valor.lower() in embarcacao.nome.lower():
                    mensagem = (f"Novo pedido {novo_pedido.id} cont√©m embarca√ß√£o com nome "
                                f"correspondente ao seu alerta ('{alerta.valor}').")
                    criar_notificacao(alerta.usuario_id, mensagem)
                    break  # Evita notificar o mesmo alerta mais de uma vez para o mesmo pedido

        # Se o alerta for do tipo "cnpj", comparamos com o CNPJ da empresa do pedido
        elif alerta.tipo == "cnpj":
            if novo_pedido.cnpj_empresa == alerta.valor:
                mensagem = (f"Novo pedido {novo_pedido.id} criado por CNPJ "
                            f"'{novo_pedido.cnpj_empresa}' corresponde ao seu alerta.")
                criar_notificacao(alerta.usuario_id, mensagem)

def criar_notificacao(usuario_id, mensagem):
    """ Cria uma notifica√ß√£o para um usu√°rio espec√≠fico """
    nova_notificacao = Notificacao(usuario_id=usuario_id, mensagem=mensagem)
    db.session.add(nova_notificacao)
    db.session.commit()

def gerar_token():
    # Pode ser um UUID ou um hash baseado em dados e uma secret key
    return str(uuid.uuid4())

def gerar_qr_code(token):
    # Gera a URL para verifica√ß√£o usando url_for (assumindo que voc√™ tem a rota 'verificar_comprovante')
    url = url_for('pedidos.verificar_comprovante', token=token, _external=True)
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(url)
    qr.make(fit=True)
    img = qr.make_image(fill='black', back_color='white')

    # Converter a imagem para base64 para exibir no template
    buffered = BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode("utf-8")
    return img_str

######### In√≠cio de defini√ß√£o das rotas ##########################################################################

pedidos_bp = Blueprint('pedidos', __name__)

@pedidos_bp.route('/')
def home():
    """Redireciona usu√°rios n√£o logados para a p√°gina de login"""
    if not current_user.is_authenticated:
        return redirect(url_for('auth.login'))  # üîπ Redireciona para login
    return redirect(url_for('pedidos.exibir_pedidos'))  # üîπ Se logado, vai para /lista-pedidos

@pedidos_bp.route('/api/pedidos-autorizacao', methods=['POST', 'GET'])
@login_required
def gerenciar_pedidos():
    """
    POST: Cria um novo pedido de autoriza√ß√£o de servi√ßo.
    GET: Retorna todos os pedidos cadastrados com suporte a filtros, pagina√ß√£o e ordena√ß√£o.
    """
    if request.method == 'POST':
        try:
            # Obter dados em formato JSON
            data = request.get_json()
            if not data:
                return jsonify({"error": "Dados JSON n√£o enviados ou inv√°lidos."}), 400

            # Valida√ß√£o do CNPJ
            cnpj = data.get("cnpj_empresa", "")
            if not validar_cnpj(cnpj):
                return jsonify({"error": "CNPJ inv√°lido!"}), 400

            # Verifica√ß√£o de campos obrigat√≥rios (atualizados)
            required_fields = [
                "nome_empresa", "cnpj_empresa", "endereco_empresa", "motivo_solicitacao",
                "data_inicio", "data_termino", "horario_inicio_servicos", "horario_termino_servicos",
                "certificado_livre_pratica", "cidade_servico", "embarcacoes", "equipamentos", "pessoas"
            ]
            campos_invalidos = [field for field in required_fields if not data.get(field)]
            if campos_invalidos:
                return jsonify({
                    "error": f"Campos obrigat√≥rios faltantes ou vazios: {', '.join(campos_invalidos)}"
                }), 400

            # Convers√£o das datas para objetos date
            try:
                data_inicio = datetime.strptime(data["data_inicio"], "%Y-%m-%d").date()
                data_termino = datetime.strptime(data["data_termino"], "%Y-%m-%d").date()
            except ValueError:
                return jsonify({"error": "Formato de data inv√°lido. Use 'YYYY-MM-DD'."}), 400

            hoje = datetime.today().date()
            if data_inicio < hoje:
                return jsonify({"error": "A data de in√≠cio deve ser hoje ou uma data futura."}), 400
            if data_termino < data_inicio:
                return jsonify({"error": "A data de t√©rmino deve ser maior ou igual √† data de in√≠cio."}), 400

            # Valida√ß√£o da dura√ß√£o m√°xima do servi√ßo: m√°ximo 5 dias
            duracao = (data_termino - data_inicio).days
            if duracao > 5:
                return jsonify({"error": "A dura√ß√£o m√°xima do servi√ßo √© de 5 dias."}), 400

            # Cria√ß√£o do novo pedido de autoriza√ß√£o com os novos campos
            novo_pedido = PedidoAutorizacao(
                empresa_responsavel=data["nome_empresa"],
                cnpj_empresa=data["cnpj_empresa"],
                endereco_empresa=data["endereco_empresa"],
                motivo_solicitacao=data["motivo_solicitacao"],
                data_inicio=data_inicio,
                data_termino=data_termino,
                horario_inicio_servicos=data["horario_inicio_servicos"],
                horario_termino_servicos=data["horario_termino_servicos"],
                certificado_livre_pratica=data["certificado_livre_pratica"],
                cidade_servico=data["cidade_servico"],
                observacoes=data.get("observacoes", None),
                usuario_id=current_user.id
            )

            # -------------------------------
            # Processamento de Embarca√ß√µes
            # -------------------------------
            # data["embarcacoes"] √© uma lista de dicion√°rios com as chaves: "nome", "imo" e "bandeira"
            for embarcacao_data in data["embarcacoes"]:
                nome = embarcacao_data.get("nome", "").strip()
                if nome:
                    embarcacao = db.session.query(Embarcacao).filter_by(nome=nome).first()
                    if not embarcacao:
                        embarcacao = Embarcacao(
                            nome=nome,
                            imo=embarcacao_data.get("imo", "").strip(),
                            bandeira=embarcacao_data.get("bandeira", "").strip()
                        )
                        db.session.add(embarcacao)
                    else:
                        # Opcional: atualizar os campos se novos valores forem enviados
                        if embarcacao_data.get("imo"):
                            embarcacao.imo = embarcacao_data.get("imo").strip()
                        if embarcacao_data.get("bandeira"):
                            embarcacao.bandeira = embarcacao_data.get("bandeira").strip()
                    novo_pedido.embarcacoes.append(embarcacao)

            # -------------------------------
            # Processamento de Equipamentos
            # -------------------------------
            # data["equipamentos"] √© uma lista de dicion√°rios com as chaves:
            # "descricao", "numero_serie" e "quantidade"
            if "equipamentos" in data and data["equipamentos"]:
                for equipamento_data in data["equipamentos"]:
                    descricao = equipamento_data.get("descricao", "").strip()
                    numero_serie = equipamento_data.get("numero_serie", "").strip()
                    quantidade = equipamento_data.get("quantidade", 0)
                    if descricao and numero_serie and quantidade:
                        equipamento = db.session.query(Equipamento).filter_by(numero_serie=numero_serie).first()
                        if not equipamento:
                            equipamento = Equipamento(
                                descricao=descricao,
                                numero_serie=numero_serie,
                                quantidade=int(quantidade)
                            )
                            db.session.add(equipamento)
                        else:
                            # Atualiza a quantidade conforme o novo valor
                            equipamento.quantidade = int(quantidade)
                        # Associa o equipamento apenas uma vez ao pedido
                        novo_pedido.equipamentos.append(equipamento)
                    else:
                        continue

            # -------------------------------
            # Processamento de Pessoas
            # -------------------------------
            # data["pessoas"] √© uma lista de dicion√°rios com as chaves: "nome", "cpf" e "isps"
            for pessoa_data in data["pessoas"]:
                nome_pessoa = pessoa_data.get("nome", "").strip()
                cpf_pessoa = pessoa_data.get("cpf", "").strip()
                isps = pessoa_data.get("isps", "").strip()
                if nome_pessoa and cpf_pessoa:
                    pessoa = db.session.query(Pessoa).filter_by(cpf=cpf_pessoa).first()
                    if not pessoa:
                        pessoa = Pessoa(nome=nome_pessoa, cpf=cpf_pessoa, isps=isps)
                        db.session.add(pessoa)
                    else:
                        if isps:
                            pessoa.isps = isps
                    novo_pedido.pessoas.append(pessoa)

            # -------------------------------
            # Processamento de Ve√≠culos
            # -------------------------------
            # data["veiculos"] √© uma lista de dicion√°rios com "modelo" e "placa"
            if "veiculos" in data and data["veiculos"]:
                for veiculo_data in data["veiculos"]:
                    modelo_veiculo = veiculo_data.get("modelo", "").strip()
                    placa_veiculo = veiculo_data.get("placa", "").strip()
                    if modelo_veiculo and placa_veiculo:
                        veiculo = db.session.query(Veiculo).filter_by(placa=placa_veiculo).first()
                        if not veiculo:
                            veiculo = Veiculo(modelo=modelo_veiculo, placa=placa_veiculo)
                            db.session.add(veiculo)
                        novo_pedido.veiculos.append(veiculo)

            db.session.add(novo_pedido)
            db.session.commit()

            # Verificar alertas e notificar administradores (fluxo inalterado)
            verificar_alertas(novo_pedido)
            administradores = Usuario.query.filter_by(role="RFB").all()
            mensagem = f"Novo pedido {novo_pedido.id} foi cadastrado e aguarda aprova√ß√£o."
            for admin in administradores:
                criar_notificacao(admin.id, mensagem)

            return jsonify({
                "message": "Pedido de autoriza√ß√£o criado com sucesso!",
                "id_autorizacao": novo_pedido.id
            }), 201

        except Exception as e:
            logging.exception("Erro ao criar pedido de autoriza√ß√£o:")
            return jsonify({"error": "Ocorreu um erro interno no servidor."}), 500

    elif request.method == 'GET':
        try:
            # C√≥digo GET existente (com filtros, pagina√ß√£o e ordena√ß√£o)
            query = PedidoAutorizacao.query
            page = request.args.get("page", default=1, type=int)
            per_page = request.args.get("per_page", default=10, type=int)
            query = query.order_by(PedidoAutorizacao.data_inicio.desc())
            pedidos_paginados = query.paginate(page=page, per_page=per_page, error_out=False)

            pedidos_lista = []
            for pedido in pedidos_paginados.items:
                pedido_dict = {
                    "id_autorizacao": pedido.id,
                    "nome_empresa": pedido.empresa_responsavel,
                    "cnpj_empresa": pedido.cnpj_empresa,
                    "endereco_empresa": pedido.endereco_empresa,
                    "motivo_solicitacao": pedido.motivo_solicitacao,
                    "data_inicio_servico": pedido.data_inicio.strftime("%Y-%m-%d"),
                    "data_termino_servico": pedido.data_termino.strftime("%Y-%m-%d"),
                    "horario_servicos": f"{pedido.horario_inicio_servicos} - {pedido.horario_termino_servicos}"
                }
                pedidos_lista.append(pedido_dict)

            return jsonify({
                "total_pedidos": pedidos_paginados.total,
                "pagina_atual": pedidos_paginados.page,
                "total_paginas": pedidos_paginados.pages,
                "pedidos": pedidos_lista
            }), 200

        except Exception as e:
            logging.exception("Erro ao recuperar pedidos de autoriza√ß√£o:")
            return jsonify({"error": "Ocorreu um erro interno no servidor."}), 500


@pedidos_bp.route('/pedido/<int:pedido_id>/editar', methods=['GET', 'POST'])
@login_required
def editar_pedido(pedido_id):
    """
    Rota para editar um pedido existente via formul√°rio web.
    Somente o criador pode editar e apenas se o status for 'pendente'.
    """
    pedido = PedidoAutorizacao.query.get_or_404(pedido_id)

    if pedido.usuario_id != current_user.id:
        flash("Voc√™ n√£o tem permiss√£o para editar esse pedido.", "danger")
        return redirect(url_for('pedidos.exibir_pedidos'))

    if pedido.status != "pendente":
        flash("Somente pedidos pendentes podem ser editados.", "warning")
        return redirect(url_for('pedidos.exibir_detalhes_pedido', pedido_id=pedido.id))

    if request.method == 'POST':
        # Obter os dados do formul√°rio (agora incluindo os novos campos)
        nome_empresa = request.form.get('nome_empresa')
        cnpj_empresa = request.form.get('cnpj_empresa')
        endereco_empresa = request.form.get('endereco_empresa')
        motivo_solicitacao = request.form.get('motivo_solicitacao')
        data_inicio_str = request.form.get('data_inicio')
        data_termino_str = request.form.get('data_termino')
        horario_inicio = request.form.get('horario_inicio_servicos')
        horario_termino = request.form.get('horario_termino_servicos')
        certificado = request.form.get('certificado_livre_pratica')
        cidade_servico = request.form.get('cidade_servico')
        observacoes = request.form.get('observacoes')

        try:
            data_inicio = datetime.strptime(data_inicio_str, "%Y-%m-%d").date()
            data_termino = datetime.strptime(data_termino_str, "%Y-%m-%d").date()
        except ValueError:
            flash("Formato de data inv√°lido. Use 'YYYY-MM-DD'.", "danger")
            return render_template('formulario.html', pedido=pedido)

        # Atualiza os atributos do pedido
        pedido.empresa_responsavel = nome_empresa
        pedido.cnpj_empresa = cnpj_empresa
        pedido.endereco_empresa = endereco_empresa
        pedido.motivo_solicitacao = motivo_solicitacao
        pedido.data_inicio = data_inicio
        pedido.data_termino = data_termino
        pedido.horario_inicio_servicos = horario_inicio
        pedido.horario_termino_servicos = horario_termino
        pedido.certificado_livre_pratica = certificado
        pedido.cidade_servico = cidade_servico
        pedido.observacoes = observacoes

        # (Caso deseje atualizar tamb√©m os relacionamentos, fa√ßa-o aqui)

        db.session.commit()
        flash("Pedido atualizado com sucesso!", "success")
        return redirect(url_for('pedidos.exibir_detalhes_pedido', pedido_id=pedido.id))

    return render_template('formulario.html', pedido=pedido)


@pedidos_bp.route('/api/pedidos-autorizacao/<int:pedido_id>', methods=['PUT'])
@login_required
def atualizar_pedido_api(pedido_id):
    """
    Atualiza um pedido via API.
    Somente o criador e pedidos com status 'pendente' podem ser editados.
    """
    pedido = PedidoAutorizacao.query.get_or_404(pedido_id)

    if pedido.usuario_id != current_user.id:
        return jsonify({"error": "Voc√™ n√£o tem permiss√£o para editar esse pedido."}), 403

    if pedido.status != "pendente":
        return jsonify({"error": "Somente pedidos pendentes podem ser editados."}), 400

    data = request.get_json()
    if not data:
        return jsonify({"error": "Nenhum dado enviado."}), 400

    try:
        # Atualiza os campos principais
        pedido.empresa_responsavel = data.get("nome_empresa")
        pedido.cnpj_empresa = data.get("cnpj_empresa")
        pedido.endereco_empresa = data.get("endereco_empresa")
        pedido.motivo_solicitacao = data.get("motivo_solicitacao")
        pedido.data_inicio = datetime.strptime(data.get("data_inicio"), "%Y-%m-%d").date()
        pedido.data_termino = datetime.strptime(data.get("data_termino"), "%Y-%m-%d").date()

        # Valida√ß√£o da dura√ß√£o m√°xima do servi√ßo: m√°ximo 5 dias
        duracao = (pedido.data_termino - pedido.data_inicio).days
        if duracao > 5:
            return jsonify({"error": "A dura√ß√£o m√°xima do servi√ßo √© de 5 dias."}), 400

        pedido.horario_inicio_servicos = data.get("horario_inicio_servicos")
        pedido.horario_termino_servicos = data.get("horario_termino_servicos")
        pedido.certificado_livre_pratica = data.get("certificado_livre_pratica")
        pedido.cidade_servico = data.get("cidade_servico")
        pedido.observacoes = data.get("observacoes")

        # -------------------------------
        # Atualiza√ß√£o de Embarca√ß√µes
        # -------------------------------
        pedido.embarcacoes.clear()
        for embarcacao_data in data.get("embarcacoes", []):
            nome = embarcacao_data.get("nome", "").strip()
            if nome:
                embarcacao = db.session.query(Embarcacao).filter_by(nome=nome).first()
                if not embarcacao:
                    embarcacao = Embarcacao(
                        nome=nome,
                        imo=embarcacao_data.get("imo", "").strip(),
                        bandeira=embarcacao_data.get("bandeira", "").strip()
                    )
                    db.session.add(embarcacao)
                else:
                    if embarcacao_data.get("imo"):
                        embarcacao.imo = embarcacao_data.get("imo").strip()
                    if embarcacao_data.get("bandeira"):
                        embarcacao.bandeira = embarcacao_data.get("bandeira").strip()
                pedido.embarcacoes.append(embarcacao)

        # -------------------------------
        # Atualiza√ß√£o de Ve√≠culos
        # -------------------------------
        pedido.veiculos.clear()
        for veiculo_data in data.get("veiculos", []):
            modelo = veiculo_data.get("modelo", "").strip()
            placa = veiculo_data.get("placa", "").strip()
            if modelo and placa:
                veiculo = db.session.query(Veiculo).filter_by(placa=placa).first()
                if not veiculo:
                    veiculo = Veiculo(modelo=modelo, placa=placa)
                    db.session.add(veiculo)
                pedido.veiculos.append(veiculo)

        # -------------------------------
        # Atualiza√ß√£o de Equipamentos
        # -------------------------------
        pedido.equipamentos.clear()
        for equipamento_data in data.get("equipamentos", []):
            descricao = equipamento_data.get("descricao", "").strip()
            numero_serie = equipamento_data.get("numero_serie", "").strip()
            quantidade = equipamento_data.get("quantidade", 0)
            if descricao and numero_serie and quantidade:
                equipamento = db.session.query(Equipamento).filter_by(numero_serie=numero_serie).first()
                if not equipamento:
                    equipamento = Equipamento(
                        descricao=descricao,
                        numero_serie=numero_serie,
                        quantidade=int(quantidade)
                    )
                    db.session.add(equipamento)
                else:
                    equipamento.quantidade = int(quantidade)
                pedido.equipamentos.append(equipamento)

        # -------------------------------
        # Atualiza√ß√£o de Pessoas
        # -------------------------------
        pedido.pessoas.clear()
        for pessoa_data in data.get("pessoas", []):
            nome = pessoa_data.get("nome", "").strip()
            cpf = pessoa_data.get("cpf", "").strip()
            isps = pessoa_data.get("isps", "").strip()
            if nome and cpf:
                pessoa = db.session.query(Pessoa).filter_by(cpf=cpf).first()
                if not pessoa:
                    pessoa = Pessoa(nome=nome, cpf=cpf, isps=isps)
                    db.session.add(pessoa)
                else:
                    if isps:
                        pessoa.isps = isps
                pedido.pessoas.append(pessoa)

        db.session.commit()
        return jsonify({
            "message": "Pedido atualizado com sucesso!",
            "id_autorizacao": pedido.id
        }), 200

    except Exception as e:
        db.session.rollback()
        logging.exception("Erro ao atualizar pedido:")
        return jsonify({"error": "Erro ao atualizar pedido."}), 500

from flask import render_template, redirect, url_for, request, jsonify
from flask_login import login_required, current_user
from datetime import datetime
from app.models import PedidoAutorizacao, Embarcacao
from app.forms import PedidoSearchForm
from app import db

@pedidos_bp.route('/lista-pedidos', methods=['GET'])
@login_required
def exibir_pedidos():
    """Exibe os pedidos em uma p√°gina HTML com filtros, busca e pagina√ß√£o."""
    
    # Cria o formul√°rio de busca com os par√¢metros da query string
    form = PedidoSearchForm(request.args)
    
    # Captura a pagina√ß√£o
    page = request.args.get("page", default=1, type=int)
    per_page = request.args.get("per_page", default=10, type=int)
    
    # Base da query: usu√°rios comuns veem apenas seus pedidos; RFB v√™ todos
    if current_user.role == "RFB":
        query = PedidoAutorizacao.query
    else:
        query = PedidoAutorizacao.query.filter_by(usuario_id=current_user.id)
    
    # Aplicando os filtros com base nos dados do formul√°rio
    if form.nome_empresa.data:
        query = query.filter(PedidoAutorizacao.empresa_responsavel.ilike(f"%{form.nome_empresa.data}%"))
    
    if form.cnpj_empresa.data:
        query = query.filter(PedidoAutorizacao.cnpj_empresa.ilike(f"%{form.cnpj_empresa.data}%"))
    
    if form.status.data in ["pendente", "aprovado", "rejeitado", "exig√™ncia"]:
        query = query.filter(PedidoAutorizacao.status == form.status.data)
    
    if form.data_inicio.data:
        query = query.filter(PedidoAutorizacao.data_inicio >= form.data_inicio.data)
    
    if form.data_termino.data:
        query = query.filter(PedidoAutorizacao.data_termino <= form.data_termino.data)
    
    if form.nome_embarcacao.data:
        query = query.join(PedidoAutorizacao.embarcacoes).filter(Embarcacao.nome.ilike(f"%{form.nome_embarcacao.data}%"))
    
    # Ordena√ß√£o e pagina√ß√£o
    query = query.order_by(PedidoAutorizacao.data_inicio.desc())
    pedidos_paginados = query.paginate(page=page, per_page=per_page, error_out=False)
    
    return render_template('lista-pedidos.html', pedidos=pedidos_paginados, form=form)

@pedidos_bp.route('/pedido/<int:pedido_id>', methods=['GET'])
@login_required
def exibir_detalhes_pedido(pedido_id):
    """ Exibe os detalhes de um pedido espec√≠fico """
    pedido = PedidoAutorizacao.query.get_or_404(pedido_id)

    return render_template('detalhes-pedido.html', pedido=pedido)

@pedidos_bp.route('/api/pedidos-autorizacao/<int:pedido_id>/aprovar', methods=['PUT'])
@login_required
def aprovar_pedido(pedido_id):
    """ Aprova um pedido de autoriza√ß√£o """

    # üîπ Verifica se o usu√°rio tem permiss√£o
    if current_user.role != "RFB":
        return jsonify({"error": "Acesso n√£o autorizado"}), 403

    # üîπ Busca o pedido no banco
    pedido = PedidoAutorizacao.query.get_or_404(pedido_id)

    # üîπ Verifica se j√° foi aprovado
    if pedido.status == "aprovado":
        return jsonify({"error": "Este pedido j√° foi aprovado"}), 400

    # üîπ Aprova o pedido
    pedido.status = "aprovado"
    db.session.commit()

    return jsonify({"message": "Pedido aprovado com sucesso!", "id_autorizacao": pedido.id, "status": pedido.status}), 200

@pedidos_bp.route('/api/pedidos-autorizacao/<int:pedido_id>/rejeitar', methods=['PUT'])
@login_required  # üîπ Agora apenas usu√°rios logados podem acessar
def rejeitar_pedido(pedido_id):
    """ Rejeita um pedido de autoriza√ß√£o """

    # üîπ Verifica se o usu√°rio tem permiss√£o para rejeitar
    if current_user.role != "RFB":
        return jsonify({"error": "Acesso n√£o autorizado"}), 403

    # üîπ Busca o pedido no banco
    pedido = PedidoAutorizacao.query.get_or_404(pedido_id)

    # üîπ Verifica se j√° foi aprovado ou rejeitado
    if pedido.status != "pendente":
        return jsonify({"error": f"Este pedido j√° foi {pedido.status}."}), 400

    # üîπ Rejeita o pedido
    pedido.status = "rejeitado"
    db.session.commit()

    return jsonify({"message": "Pedido rejeitado com sucesso!", "id_autorizacao": pedido.id, "status": pedido.status}), 200

@pedidos_bp.route('/api/pedidos-autorizacao/<int:pedido_id>/exigir', methods=['POST'])
@login_required
def exigir_pedido(pedido_id):
    """
    Registra uma exig√™ncia para um pedido de autoriza√ß√£o.
    Apenas usu√°rios com role "RFB" podem executar essa a√ß√£o.
    Ao fazer a exig√™ncia, √© necess√°rio informar:
      - motivo_exigencia: o motivo da exig√™ncia;
      - prazo_exigencia: prazo (no formato AAAA-MM-DD) para o cumprimento da exig√™ncia.
    O status do pedido √© atualizado para "exig√™ncia".
    """
    # üîπ Verifica se o usu√°rio tem permiss√£o
    if current_user.role != "RFB":
        return jsonify({"error": "Acesso n√£o autorizado"}), 403

    # üîπ Busca o pedido no banco
    pedido = PedidoAutorizacao.query.get_or_404(pedido_id)

    # üîπ Verifica se o pedido est√° no status pendente
    if pedido.status != "pendente":
        return jsonify({"error": f"Este pedido j√° foi {pedido.status}."}), 400

    # üîπ Obt√©m os dados enviados no corpo da requisi√ß√£o (JSON)
    data = request.get_json()
    if not data:
        return jsonify({"error": "Dados inv√°lidos"}), 400

    motivo_exigencia = data.get('motivo_exigencia')
    prazo_exigencia = data.get('prazo_exigencia')

    # üîπ Valida se os campos obrigat√≥rios foram informados
    if not motivo_exigencia or not prazo_exigencia:
        return jsonify({"error": "Os campos 'motivo_exigencia' e 'prazo_exigencia' s√£o obrigat√≥rios."}), 400

    # üîπ Converte o prazo para o formato de data (AAAA-MM-DD)
    try:
        prazo_exigencia_date = datetime.strptime(prazo_exigencia, '%Y-%m-%d').date()
    except ValueError:
        return jsonify({"error": "Formato de prazo_exigencia inv√°lido. Utilize AAAA-MM-DD."}), 400

    # üîπ Cria o registro da exig√™ncia (assumindo que o model Exigencia foi criado)
    exigencia = Exigencia(
        pedido_id=pedido.id,
        motivo_exigencia=motivo_exigencia,
        prazo_exigencia=prazo_exigencia_date
    )
    db.session.add(exigencia)

    # üîπ Atualiza o status do pedido para "exig√™ncia"
    pedido.status = "exig√™ncia"
    db.session.commit()

    return jsonify({
        "message": "Exig√™ncia registrada com sucesso!",
        "id_autorizacao": pedido.id,
        "status": pedido.status
    }), 200


@pedidos_bp.route('/exigencia/<int:exigencia_id>')
@login_required
def detalhes_exigencia(exigencia_id):
    exigencia = Exigencia.query.get_or_404(exigencia_id)

    # Verifica se o usu√°rio atual √© 'RFB' ou se √© o criador do pedido associado √† exig√™ncia
    if current_user.role != 'RFB' and exigencia.pedido.usuario_id != current_user.id:
        return jsonify({"error": "Voc√™ n√£o tem permiss√£o para ver essa exig√™ncia."}), 403

    return render_template('detalhes_exigencia.html', exigencia=exigencia)

@pedidos_bp.route('/formulario-pedido', methods=['GET'])
@login_required  # üîπ Apenas usu√°rios logados podem acessar
def exibir_formulario():
    """ Rota que exibe o formul√°rio para preencher o pedido de autoriza√ß√£o """
    return render_template('formulario.html')

@pedidos_bp.route('/admin')
@login_required
def admin_dashboard():
    """ Painel Administrativo - Somente para usu√°rios RFB """

    # üîπ Verifica se o usu√°rio √© RFB
    if current_user.role != "RFB":
        return redirect(url_for("pedidos.exibir_pedidos"))

    # üîπ Estat√≠sticas gerais
    total_pedidos = PedidoAutorizacao.query.count()
    pedidos_aprovados = PedidoAutorizacao.query.filter_by(status="aprovado").count()
    pedidos_rejeitados = PedidoAutorizacao.query.filter_by(status="rejeitado").count()
    pedidos_pendentes = PedidoAutorizacao.query.filter_by(status="pendente").count()
    total_usuarios = Usuario.query.count()

    # üîπ Contagem de pedidos por dia
    pedidos_por_dia = (
        db.session.query(func.date(PedidoAutorizacao.data_inicio), func.count())
        .group_by(func.date(PedidoAutorizacao.data_inicio))
        .order_by(func.date(PedidoAutorizacao.data_inicio))
        .all()
    )

    # üîπ Preparar dados para o gr√°fico
    datas = [str(p[0]) for p in pedidos_por_dia]
    pedidos_quantidade = [p[1] for p in pedidos_por_dia]

    return render_template("admin.html", 
                           total_pedidos=total_pedidos, 
                           pedidos_aprovados=pedidos_aprovados,
                           pedidos_rejeitados=pedidos_rejeitados, 
                           pedidos_pendentes=pedidos_pendentes,
                           total_usuarios=total_usuarios,
                           datas=datas, 
                           pedidos_quantidade=pedidos_quantidade)

@pedidos_bp.route('/admin/alertas', methods=['GET', 'POST'])
@login_required
def gerenciar_alertas():
    """Exibe os alertas do usu√°rio RFB e permite a cria√ß√£o de novos alertas."""
    if current_user.role != "RFB":
        return redirect(url_for('pedidos.exibir_pedidos'))
    
    form = AlertaForm()
    if form.validate_on_submit():
        novo_alerta = Alerta(
            usuario_id=current_user.id,
            tipo=form.tipo.data,
            valor=form.valor.data
        )
        db.session.add(novo_alerta)
        db.session.commit()
        return redirect(url_for("pedidos.gerenciar_alertas"))
    
    alertas = Alerta.query.filter_by(usuario_id=current_user.id).all()
    return render_template("gerenciar_alertas.html", alertas=alertas, form=form)

@pedidos_bp.route('/comprovante/<int:pedido_id>')
@login_required
def gerar_comprovante(pedido_id):
    pedido = PedidoAutorizacao.query.get_or_404(pedido_id)

    # Verifica se o pedido foi aprovado e se o usu√°rio tem permiss√£o para visualizar o comprovante
    if pedido.status != "aprovado" or pedido.usuario_id != current_user.id:
        return jsonify({"error": "Voc√™ n√£o tem permiss√£o para visualizar este comprovante."}), 403

    # Se ainda n√£o existir um token, gere e salve
    if not pedido.token_comprovante:
        pedido.token_comprovante = gerar_token()
        db.session.commit()

    qr_code_base64 = gerar_qr_code(pedido.token_comprovante)

    return render_template('comprovante.html', pedido=pedido, qr_code=qr_code_base64)

@pedidos_bp.route('/verificar-comprovante/<string:token>')
def verificar_comprovante(token):
    # Procura um pedido com o token informado
    pedido = PedidoAutorizacao.query.filter_by(token_comprovante=token, status="aprovado").first()
    if not pedido:
        return render_template('comprovante_invalido.html'), 404

    # Se v√°lido, exiba os dados do pedido
    return render_template('detalhes_comprovante.html', pedido=pedido)

@pedidos_bp.route('/admin/exportar-csv')
@login_required
def exportar_csv():
    """Exporta os pedidos como um arquivo CSV."""
    
    # Verifica se o usu√°rio tem a permiss√£o necess√°ria
    if current_user.role != "RFB":
        return redirect(url_for("pedidos.exibir_pedidos"))

    # Obt√©m os pedidos utilizando os filtros
    pedidos = filtrar_pedidos()

    # Cria um buffer em mem√≥ria para armazenar o CSV
    output = io.StringIO()

    # Cria o writer para escrever no buffer
    writer = csv.writer(output)
    
    # Escreve a linha de cabe√ßalho
    writer.writerow(["ID", "Empresa", "CNPJ", "Motivo", "Data In√≠cio", "Data T√©rmino", "Status"])
    
    # Escreve cada linha dos pedidos
    for pedido in pedidos:
        writer.writerow([
            pedido.id,
            pedido.empresa_responsavel,
            pedido.cnpj_empresa,
            pedido.motivo_solicitacao,
            pedido.data_inicio,
            pedido.data_termino,
            pedido.status
        ])
    
    # Obt√©m o conte√∫do do CSV a partir do buffer
    csv_content = output.getvalue()
    
    # Fecha o buffer (opcional, mas recomendado)
    output.close()
    
    # Cria a resposta HTTP com o conte√∫do do CSV
    response = make_response(csv_content)
    response.headers["Content-Disposition"] = "attachment; filename=relatorio_pedidos.csv"
    response.headers["Content-Type"] = "text/csv"
    
    return response

@pedidos_bp.route('/admin/exportar-pdf')
@login_required
def exportar_pdf():
    """ Exporta os pedidos como um arquivo PDF formatado com sum√°rio estat√≠stico """
    
    if current_user.role != "RFB":
        return redirect(url_for("pedidos.exibir_pedidos"))

    #pedidos = PedidoAutorizacao.query.all() #caso queira exportar todos os pedidos sem nenhum filtro
    
    # Utiliza os filtros para obter os pedidos
    pedidos = filtrar_pedidos()

    # üîπ Estat√≠sticas gerais
    total_pedidos = len(pedidos)
    pedidos_aprovados = len([p for p in pedidos if p.status == "aprovado"])
    pedidos_rejeitados = len([p for p in pedidos if p.status == "rejeitado"])
    pedidos_pendentes = len([p for p in pedidos if p.status == "pendente"])

    buffer = BytesIO()
    pdf = SimpleDocTemplate(buffer, pagesize=landscape(letter))
    
    elementos = []

    # üîπ T√≠tulo do Relat√≥rio
    styles = getSampleStyleSheet()
    elementos.append(Paragraph("<b>Relat√≥rio de Pedidos</b>", styles['Title']))
    elementos.append(Spacer(1, 12))  # Adiciona um espa√ßo

    # üîπ Criar a tabela de pedidos
    dados = [["ID", "Empresa", "CNPJ", "Motivo", "Data In√≠cio", "Data T√©rmino", "Status"]]
    
    for pedido in pedidos:
        dados.append([
            pedido.id, 
            pedido.empresa_responsavel, 
            pedido.cnpj_empresa, 
            pedido.motivo_solicitacao, 
            pedido.data_inicio.strftime("%d/%m/%Y"), 
            pedido.data_termino.strftime("%d/%m/%Y"), 
            pedido.status
        ])

    tabela = Table(dados)
    
    # üîπ Estilizar a tabela
    estilo = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ])
    
    tabela.setStyle(estilo)
    elementos.append(tabela)
    elementos.append(Spacer(1, 20))  # Adiciona um espa√ßo antes do sum√°rio

    # üîπ Criar o sum√°rio estat√≠stico
    elementos.append(Paragraph("<b>Sum√°rio Estat√≠stico</b>", styles['Heading2']))
    elementos.append(Paragraph(f"Total de Pedidos: {total_pedidos}", styles['Normal']))
    elementos.append(Paragraph(f"Pedidos Aprovados: {pedidos_aprovados}", styles['Normal']))
    elementos.append(Paragraph(f"Pedidos Rejeitados: {pedidos_rejeitados}", styles['Normal']))
    elementos.append(Paragraph(f"Pedidos Pendentes: {pedidos_pendentes}", styles['Normal']))

    # üîπ Criar o PDF
    pdf.build(elementos)
    buffer.seek(0)

    return send_file(buffer, as_attachment=True, download_name="relatorio_pedidos.pdf", mimetype="application/pdf")

@pedidos_bp.route('/admin/exportar-excel')
@login_required
def exportar_excel():
    """ 
    Exporta os pedidos cadastrados como um arquivo Excel (.xlsx).
    
    O arquivo conter√° duas planilhas:
      1. 'Pedidos': Rela√ß√£o completa dos pedidos.
      2. 'Sum√°rio': Estat√≠sticas gerais dos pedidos.
    """
    # Apenas usu√°rios com role "RFB" podem acessar esta rota.
    if current_user.role != "RFB":
        return redirect(url_for("pedidos.exibir_pedidos"))

    #pedidos = PedidoAutorizacao.query.all() #caso queira exportar todos os pedidos sem nenhum filtro
    
    # Utiliza os filtros para obter os pedidos
    pedidos = filtrar_pedidos()

    # Calcular estat√≠sticas
    total_pedidos = len(pedidos)
    pedidos_aprovados = len([p for p in pedidos if p.status == "aprovado"])
    pedidos_rejeitados = len([p for p in pedidos if p.status == "rejeitado"])
    pedidos_pendentes = len([p for p in pedidos if p.status == "pendente"])

    # Criar um novo Workbook
    wb = Workbook()

    # --------------------------
    # Planilha de Pedidos
    # --------------------------
    ws_pedidos = wb.active
    ws_pedidos.title = "Pedidos"

    # Cabe√ßalho da tabela
    headers = ["ID", "Empresa", "CNPJ", "Motivo", "Data In√≠cio", "Data T√©rmino", "Status"]
    ws_pedidos.append(headers)

    # Estilizar o cabe√ßalho (fonte em negrito)
    for col in range(1, len(headers) + 1):
        ws_pedidos.cell(row=1, column=col).font = Font(bold=True)

    # Preencher os dados de cada pedido
    for pedido in pedidos:
        # Formatar datas como "dd/mm/aaaa"
        data_inicio = pedido.data_inicio.strftime("%d/%m/%Y") if pedido.data_inicio else ""
        data_termino = pedido.data_termino.strftime("%d/%m/%Y") if pedido.data_termino else ""
        ws_pedidos.append([
            pedido.id,
            pedido.empresa_responsavel,
            pedido.cnpj_empresa,
            pedido.motivo_solicitacao,
            data_inicio,
            data_termino,
            pedido.status
        ])

    # Ajustar a largura das colunas para melhor visualiza√ß√£o
    for column_cells in ws_pedidos.columns:
        max_length = 0
        column = column_cells[0].column_letter  # Obter a letra da coluna
        for cell in column_cells:
            try:
                cell_length = len(str(cell.value))
                if cell_length > max_length:
                    max_length = cell_length
            except Exception:
                pass
        adjusted_width = max_length + 2
        ws_pedidos.column_dimensions[column].width = adjusted_width

    # --------------------------
    # Planilha do Sum√°rio Estat√≠stico
    # --------------------------
    ws_sumario = wb.create_sheet(title="Sum√°rio")
    
    # T√≠tulo do sum√°rio
    ws_sumario["A1"] = "Sum√°rio Estat√≠stico"
    ws_sumario["A1"].font = Font(bold=True, size=14)
    
    # Preencher estat√≠sticas
    ws_sumario["A3"] = "Total de Pedidos:"
    ws_sumario["B3"] = total_pedidos

    ws_sumario["A4"] = "Pedidos Aprovados:"
    ws_sumario["B4"] = pedidos_aprovados

    ws_sumario["A5"] = "Pedidos Rejeitados:"
    ws_sumario["B5"] = pedidos_rejeitados

    ws_sumario["A6"] = "Pedidos Pendentes:"
    ws_sumario["B6"] = pedidos_pendentes

    # Ajustar a largura das colunas do sum√°rio
    ws_sumario.column_dimensions["A"].width = 25
    ws_sumario.column_dimensions["B"].width = 15

    # --------------------------
    # Salvar o Workbook em um objeto BytesIO
    # --------------------------
    output = BytesIO()
    wb.save(output)
    output.seek(0)

    # Retornar o arquivo para download
    return send_file(
        output,
        as_attachment=True,
        download_name="relatorio_pedidos.xlsx",
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

@pedidos_bp.route("/api/notificacoes", methods=["GET"])
@limiter.limit("30 per minute")  # Permite 30 requisi√ß√µes por minuto s√≥ para essa rota
@login_required
def listar_notificacoes():
    """ Retorna notifica√ß√µes n√£o lidas do usu√°rio autenticado """
    notificacoes = Notificacao.query.filter_by(usuario_id=current_user.id, lida=False).all()

    return jsonify([
        {"id": n.id, "mensagem": n.mensagem, "data": n.data_criacao.strftime("%d/%m/%Y %H:%M"), "lida": n.lida}
        for n in notificacoes
    ])

@pedidos_bp.route('/api/notificacoes/<int:notificacao_id>/marcar-lida', methods=['PUT'])
@login_required
def marcar_notificacao_lida(notificacao_id):
    """ Marca uma notifica√ß√£o como lida """
    
    notificacao = Notificacao.query.filter_by(id=notificacao_id, usuario_id=current_user.id).first()

    if not notificacao:
        return jsonify({"error": "Notifica√ß√£o n√£o encontrada"}), 404

    notificacao.lida = True
    db.session.commit()

    return jsonify({"message": "Notifica√ß√£o marcada como lida"}), 200
